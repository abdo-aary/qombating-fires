name: Linting   #(Self-Hosted & Local)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ${{ (github.actor == 'nektos/act') && 'ubuntu-latest' || 'self-hosted' }}

    steps:
      # Step 1: Detect whether running locally with act or on GitHub Actions
      - name: Check if running locally with act
        id: check-local
        run: |
          if [ "$GITHUB_ACTIONS" != "true" ]; then
            echo "Running locally with act."
            echo "local_run=true" >> $GITHUB_ENV
          else
            echo "Running on GitHub Actions."
            echo "local_run=false" >> $GITHUB_ENV
          fi

      # Step 2: Checkout the repository code
      - name: Check out repository
        uses: actions/checkout@v2

      # Step 3: Use prebuilt Docker image if available
      - name: Start or Attach to Prebuilt Container
        run: |
          if docker images | grep -q "qombat_image"; then
            echo "Using prebuilt qombat_image."
            if [ "$local_run" == "true" ]; then
              docker run --rm -dit --name ci_container_linting -v $(pwd):/app qombat_image bash
            else
              docker run --rm -dit --name ci_container_linting qombat_image bash
            fi
          else
            echo "No prebuilt image found. Running on host."
          fi

      # Step 4: Update project files inside container (for CI runs only)
      - name: Update project files inside container (CI mode only)
        if: env.local_run == 'false'
        run: |
          echo "Copying latest project files into container..."
          docker cp . ci_container_linting:/app/

      # Step 5: Run linting checks using Flake8
      - name: Run lint checks
        run: |
          echo "Running lint checks..."
          if [ "$local_run" == "true" ]; then
            flake8 .
          else
            docker exec ci_container_linting flake8 .
          fi

      # Step 6: Cleanup - Stop and remove the container after linting
      - name: Cleanup Docker container (if used)
        if: always()
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q "^ci_container_linting$"; then
            echo "Stopping and removing Docker container..."
            docker stop ci_container_linting 2>/dev/null || true
            docker rm ci_container_linting 2>/dev/null || true
          else
            echo "Container already removed. Skipping cleanup."
          fi
